// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sft/datamarket/v1/vip.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VipInfo struct {
	VipList  []string `protobuf:"bytes,1,rep,name=vipList,proto3" json:"vipList,omitempty" yaml:"vip_list"`
	Discount float64  `protobuf:"fixed64,2,opt,name=discount,proto3" json:"discount,omitempty" yaml:"discount"`
}

func (m *VipInfo) Reset()         { *m = VipInfo{} }
func (m *VipInfo) String() string { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()    {}
func (*VipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_95fa8ad070596f8a, []int{0}
}
func (m *VipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipInfo.Merge(m, src)
}
func (m *VipInfo) XXX_Size() int {
	return m.Size()
}
func (m *VipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VipInfo proto.InternalMessageInfo

func (m *VipInfo) GetVipList() []string {
	if m != nil {
		return m.VipList
	}
	return nil
}

func (m *VipInfo) GetDiscount() float64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func init() {
	proto.RegisterType((*VipInfo)(nil), "sft.datamarket.v1.VipInfo")
}

func init() { proto.RegisterFile("sft/datamarket/v1/vip.proto", fileDescriptor_95fa8ad070596f8a) }

var fileDescriptor_95fa8ad070596f8a = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4e, 0x2b, 0xd1,
	0x4f, 0x49, 0x2c, 0x49, 0xcc, 0x4d, 0x2c, 0xca, 0x4e, 0x2d, 0xd1, 0x2f, 0x33, 0xd4, 0x2f, 0xcb,
	0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0x4e, 0x2b, 0xd1, 0x43, 0x48, 0xea,
	0x95, 0x19, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0x65, 0xf5, 0x41, 0x2c, 0x88, 0x42, 0xa5,
	0x4c, 0x2e, 0xf6, 0xb0, 0xcc, 0x02, 0xcf, 0xbc, 0xb4, 0x7c, 0x21, 0x5d, 0x2e, 0xf6, 0xb2, 0xcc,
	0x02, 0x9f, 0xcc, 0xe2, 0x12, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x4e, 0x27, 0xe1, 0x4f, 0xf7, 0xe4,
	0xf9, 0x2b, 0x13, 0x73, 0x73, 0xac, 0x94, 0xca, 0x32, 0x0b, 0xe2, 0x73, 0x32, 0x8b, 0x4b, 0x94,
	0x82, 0x60, 0x6a, 0x84, 0xf4, 0xb9, 0x38, 0x52, 0x32, 0x8b, 0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0x24,
	0x98, 0x14, 0x18, 0x35, 0x18, 0x91, 0xd5, 0xc3, 0x64, 0x94, 0x82, 0xe0, 0x8a, 0x9c, 0x7c, 0x4e,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18,
	0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x28, 0x3d, 0xb3, 0x24, 0xa3, 0x34,
	0x49, 0x2f, 0x39, 0x3f, 0x57, 0xdf, 0x39, 0xbf, 0x38, 0x37, 0xbf, 0xd8, 0x39, 0x3f, 0xaf, 0xa4,
	0x28, 0x31, 0xb9, 0xa4, 0x58, 0x3f, 0xab, 0x34, 0x2f, 0x5f, 0xbf, 0x02, 0xd9, 0xa3, 0x25, 0x95,
	0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0xf7, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xaf,
	0xa5, 0x6f, 0x07, 0x01, 0x00, 0x00,
}

func (m *VipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Discount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Discount))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.VipList) > 0 {
		for iNdEx := len(m.VipList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VipList[iNdEx])
			copy(dAtA[i:], m.VipList[iNdEx])
			i = encodeVarintVip(dAtA, i, uint64(len(m.VipList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	offset -= sovVip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VipList) > 0 {
		for _, s := range m.VipList {
			l = len(s)
			n += 1 + l + sovVip(uint64(l))
		}
	}
	if m.Discount != 0 {
		n += 9
	}
	return n
}

func sovVip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipList = append(m.VipList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Discount = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVip = fmt.Errorf("proto: unexpected end of group")
)
